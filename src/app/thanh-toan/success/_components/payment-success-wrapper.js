'use client';

import { useQueryPaymentStatus } from '../../../../services/payment.service';
import { cartAtom } from '../../../../states/common';
import { PX_ALL } from '../../../../utils/const';
import { showToast } from '../../../../utils/helper';
import {
  Box,
  Button,
  Flex,
  Text,
  VStack,
  HStack,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Spinner,
  Image,
  Divider,
  Badge,
  Card,
  CardBody,
  CardHeader
} from '@chakra-ui/react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import { useRecoilState } from 'recoil';

const PaymentSuccessWrapper = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [cart, setCart] = useRecoilState(cartAtom);

  // Get URL parameters
  const orderId = searchParams.get('orderId');
  const transactionId = searchParams.get('transactionId');
  const status = searchParams.get('status');

  const [isClient, setIsClient] = useState(false);
  const [cartCleared, setCartCleared] = useState(false);

  // Query payment status
  const { data: paymentStatus, isLoading, refetch } = useQueryPaymentStatus(orderId, !!orderId);

  // Clear cart on successful payment
  useEffect(() => {
    if (paymentStatus?.status === 'SUCCESS' && !cartCleared) {
      setCart([]);
      setCartCleared(true);
      showToast({
        status: 'success',
        content: 'Thanh to√°n th√†nh c√¥ng! Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a.'
      });
    }
  }, [paymentStatus, cart, setCart, cartCleared]);

  useEffect(() => {
    setIsClient(true);
  }, []);

  // Auto redirect if no order ID
  useEffect(() => {
    if (isClient && !orderId) {
      showToast({
        status: 'error',
        content: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng. Chuy·ªÉn v·ªÅ trang ch·ªß...'
      });
      setTimeout(() => router.push('/'), 3000);
    }
  }, [isClient, orderId, router]);

  if (!isClient) {
    return null;
  }

  if (!orderId) {
    return (
      <Flex justify="center" align="center" minH="60vh" direction="column">
        <Alert status="error" borderRadius="md" maxW="500px">
          <AlertIcon />
          <Box>
            <AlertTitle>L·ªói!</AlertTitle>
            <AlertDescription>Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng. ƒêang chuy·ªÉn v·ªÅ trang ch·ªß...</AlertDescription>
          </Box>
        </Alert>
      </Flex>
    );
  }

  if (isLoading) {
    return (
      <Flex justify="center" align="center" minH="60vh" direction="column">
        <Spinner size="lg" color="blue.500" mb="4" />
        <Text>ƒêang ki·ªÉm tra tr·∫°ng th√°i thanh to√°n...</Text>
      </Flex>
    );
  }

  const isSuccess = paymentStatus?.status === 'SUCCESS' || status === 'success';
  const isPending = paymentStatus?.status === 'PENDING' || paymentStatus?.status === 'PROCESSING';
  const isFailed = paymentStatus?.status === 'FAILED' || paymentStatus?.status === 'CANCELLED' || status === 'failed';

  return (
    <Flex direction="column" px={PX_ALL} pt={{ xs: '70px', lg: '162px' }} pb="100px">
      <VStack spacing="8" maxW="800px" mx="auto">
        {/* Success Status */}
        {isSuccess && (
          <Card w="full" variant="elevated">
            <CardHeader textAlign="center" pb="4">
              <VStack spacing="4">
                <Box fontSize="6xl">üéâ</Box>
                <Text fontSize="2xl" fontWeight="bold" color="green.600">
                  Thanh to√°n th√†nh c√¥ng!
                </Text>
              </VStack>
            </CardHeader>
            <CardBody pt="0">
              <VStack spacing="6">
                <Alert status="success" borderRadius="md">
                  <AlertIcon />
                  <Box>
                    <AlertTitle>ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</AlertTitle>
                    <AlertDescription>
                      C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng t·∫°i Di·ªáp Tr√†. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng s·ªõm
                      nh·∫•t.
                    </AlertDescription>
                  </Box>
                </Alert>

                {/* Order Details */}
                <Box w="full" bg="gray.50" p="6" borderRadius="md">
                  <Text fontSize="lg" fontWeight="semibold" mb="4">
                    Th√¥ng tin ƒë∆°n h√†ng
                  </Text>
                  <VStack align="stretch" spacing="3">
                    <HStack justify="space-between">
                      <Text color="gray.600">M√£ ƒë∆°n h√†ng:</Text>
                      <Badge colorScheme="blue" fontSize="sm">
                        {orderId}
                      </Badge>
                    </HStack>
                    {transactionId && (
                      <HStack justify="space-between">
                        <Text color="gray.600">M√£ giao d·ªãch:</Text>
                        <Text fontWeight="medium">{transactionId}</Text>
                      </HStack>
                    )}
                    {paymentStatus?.amount && (
                      <HStack justify="space-between">
                        <Text color="gray.600">T·ªïng ti·ªÅn:</Text>
                        <Text fontWeight="bold" color="green.600">
                          {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(
                            paymentStatus.amount
                          )}
                        </Text>
                      </HStack>
                    )}
                    <HStack justify="space-between">
                      <Text color="gray.600">Tr·∫°ng th√°i:</Text>
                      <Badge colorScheme="green">ƒê√£ thanh to√°n</Badge>
                    </HStack>
                  </VStack>
                </Box>

                {/* Next Steps */}
                <Box w="full" bg="blue.50" p="4" borderRadius="md" border="1px" borderColor="blue.200">
                  <Text fontWeight="semibold" color="blue.800" mb="2">
                    B∆∞·ªõc ti·∫øp theo:
                  </Text>
                  <VStack align="start" spacing="1" color="blue.700" fontSize="sm">
                    <Text>‚Ä¢ Ch√∫ng t√¥i s·∫Ω g·ªçi ƒëi·ªán x√°c nh·∫≠n ƒë∆°n h√†ng trong 24h</Text>
                    <Text>‚Ä¢ ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c chu·∫©n b·ªã v√† giao trong 2-5 ng√†y</Text>
                    <Text>‚Ä¢ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi h√†ng ƒë∆∞·ª£c giao</Text>
                  </VStack>
                </Box>

                <Divider />

                {/* Action Buttons */}
                <HStack spacing="4" w="full" justify="center">
                  <Button colorScheme="blue" onClick={() => router.push('/')} size="lg">
                    V·ªÅ trang ch·ªß
                  </Button>
                  <Button variant="outline" onClick={() => router.push('/san-pham')} size="lg">
                    Ti·∫øp t·ª•c mua s·∫Øm
                  </Button>
                </HStack>
              </VStack>
            </CardBody>
          </Card>
        )}

        {/* Pending Status */}
        {isPending && (
          <Card w="full" variant="elevated">
            <CardHeader textAlign="center" pb="4">
              <VStack spacing="4">
                <Spinner size="xl" color="orange.500" />
                <Text fontSize="2xl" fontWeight="bold" color="orange.600">
                  ƒêang x·ª≠ l√Ω thanh to√°n...
                </Text>
              </VStack>
            </CardHeader>
            <CardBody pt="0">
              <VStack spacing="6">
                <Alert status="warning" borderRadius="md">
                  <AlertIcon />
                  <Box>
                    <AlertTitle>Thanh to√°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω</AlertTitle>
                    <AlertDescription>
                      ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...
                    </AlertDescription>
                  </Box>
                </Alert>

                {orderId && (
                  <Box w="full" bg="gray.50" p="6" borderRadius="md">
                    <Text fontSize="lg" fontWeight="semibold" mb="4">
                      Th√¥ng tin ƒë∆°n h√†ng
                    </Text>
                    <VStack align="stretch" spacing="3">
                      <HStack justify="space-between">
                        <Text color="gray.600">M√£ ƒë∆°n h√†ng:</Text>
                        <Badge colorScheme="orange" fontSize="sm">
                          {orderId}
                        </Badge>
                      </HStack>
                      <HStack justify="space-between">
                        <Text color="gray.600">Tr·∫°ng th√°i:</Text>
                        <Badge colorScheme="orange">ƒêang x·ª≠ l√Ω</Badge>
                      </HStack>
                    </VStack>
                  </Box>
                )}

                <HStack spacing="4">
                  <Button
                    colorScheme="orange"
                    onClick={() => refetch()}
                    isLoading={isLoading}
                    loadingText="ƒêang ki·ªÉm tra..."
                  >
                    Ki·ªÉm tra l·∫°i
                  </Button>
                  <Button variant="outline" onClick={() => router.push('/')}>
                    V·ªÅ trang ch·ªß
                  </Button>
                </HStack>
              </VStack>
            </CardBody>
          </Card>
        )}

        {/* Failed Status */}
        {isFailed && (
          <Card w="full" variant="elevated">
            <CardHeader textAlign="center" pb="4">
              <VStack spacing="4">
                <Box fontSize="6xl">‚ùå</Box>
                <Text fontSize="2xl" fontWeight="bold" color="red.600">
                  Thanh to√°n th·∫•t b·∫°i
                </Text>
              </VStack>
            </CardHeader>
            <CardBody pt="0">
              <VStack spacing="6">
                <Alert status="error" borderRadius="md">
                  <AlertIcon />
                  <Box>
                    <AlertTitle>Thanh to√°n kh√¥ng th√†nh c√¥ng!</AlertTitle>
                    <AlertDescription>
                      C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó
                      tr·ª£.
                    </AlertDescription>
                  </Box>
                </Alert>

                {orderId && (
                  <Box w="full" bg="gray.50" p="6" borderRadius="md">
                    <Text fontSize="lg" fontWeight="semibold" mb="4">
                      Th√¥ng tin ƒë∆°n h√†ng
                    </Text>
                    <VStack align="stretch" spacing="3">
                      <HStack justify="space-between">
                        <Text color="gray.600">M√£ ƒë∆°n h√†ng:</Text>
                        <Badge colorScheme="red" fontSize="sm">
                          {orderId}
                        </Badge>
                      </HStack>
                      <HStack justify="space-between">
                        <Text color="gray.600">Tr·∫°ng th√°i:</Text>
                        <Badge colorScheme="red">Th·∫•t b·∫°i</Badge>
                      </HStack>
                    </VStack>
                  </Box>
                )}

                <Box w="full" bg="red.50" p="4" borderRadius="md" border="1px" borderColor="red.200">
                  <Text fontWeight="semibold" color="red.800" mb="2">
                    B·∫°n c√≥ th·ªÉ:
                  </Text>
                  <VStack align="start" spacing="1" color="red.700" fontSize="sm">
                    <Text>‚Ä¢ Th·ª≠ thanh to√°n l·∫°i v·ªõi ph∆∞∆°ng th·ª©c kh√°c</Text>
                    <Text>‚Ä¢ Li√™n h·ªá hotline: 0788339379 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£</Text>
                    <Text>‚Ä¢ Ho·∫∑c ƒë·∫∑t h√†ng b·∫±ng c√°ch g·ªçi ƒëi·ªán tr·ª±c ti·∫øp</Text>
                  </VStack>
                </Box>

                <HStack spacing="4" w="full" justify="center">
                  <Button colorScheme="red" onClick={() => router.push('/gio-hang')} size="lg">
                    Th·ª≠ l·∫°i
                  </Button>
                  <Button variant="outline" onClick={() => router.push('/')} size="lg">
                    V·ªÅ trang ch·ªß
                  </Button>
                </HStack>
              </VStack>
            </CardBody>
          </Card>
        )}

        {/* Customer Support */}
        <Box w="full" bg="blue.50" p="6" borderRadius="md" textAlign="center">
          <Text fontSize="lg" fontWeight="semibold" mb="3" color="blue.800">
            C·∫ßn h·ªó tr·ª£?
          </Text>
          <Text color="blue.700" mb="4">
            N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o v·ªÅ ƒë∆°n h√†ng, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i:
          </Text>
          <VStack spacing="2">
            <HStack spacing="2" justify="center">
              <Text fontWeight="medium">Hotline:</Text>
              <Text color="blue.600" fontWeight="bold">
                0788339379
              </Text>
            </HStack>
            <HStack spacing="2" justify="center">
              <Text fontWeight="medium">Email:</Text>
              <Text color="blue.600">hisweetievietnam@gmail.com</Text>
            </HStack>
          </VStack>
        </Box>
      </VStack>
    </Flex>
  );
};

export default PaymentSuccessWrapper;
